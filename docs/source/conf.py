# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
from os.path import join, abspath, dirname, isdir
import inspect
import shutil
import sys
import scilpy


module_path = inspect.getfile(scilpy)
module_path = os.path.dirname(os.path.dirname(module_path))
sys.path.insert(0, os.path.abspath(os.path.join(module_path, "cli")))

# -- Project information -----------------------------------------------------

project = 'scilpy'
copyright = '2025, The SCIL developers'
author = 'The SCIL developers'

# The short X.Y version
version = u''
# The full version, including alpha/beta/rc tags
release = u''

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.napoleon',
    'sphinx.ext.viewcode',
    'sphinx.ext.mathjax',
    'sphinx_code_tabs'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
# language = 'english'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
    'collapse_navigation': False,
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".

# To get full width:
html_static_path = ['_static']
html_css_files = [
    'my_style.css',  # overrides for width size
]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'scilpydoc'

# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'scilpy.tex', u'scilpy Documentation',
     u'SCIL', 'manual'),
]

# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'scilpy', u'scilpy Documentation',
     [author], 1)
]

# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'scilpy', u'scilpy Documentation',
     author, 'scilpy', 'One line description of project.',
     'Miscellaneous'),
]

# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']

# -- Extension configuration -------------------------------------------------


def setup(app):

    path_script = abspath(join(module_path, "scilpy/cli"))
    sys.path.insert(0, path_script)

    path_src = abspath(dirname(__file__))
    # Create script folder
    if isdir(join(path_src, "scripts")):
        shutil.rmtree(join(path_src, "scripts"))
    os.mkdir(join(path_src, "scripts"))

    # 1) Modules API documentation preparation.

    # Adding fake c files
    for f in os.listdir(join(path_src, "fake_files")):
        shutil.copyfile(join(path_src, "fake_files", f),
                        join(module_path, "scilpy/tractanalysis/", f))

    # Preparing a cleanup hook to delete these files later when the doc is
    # finished building.
    def cleanup_fake_files(app, exception):
        """Delete fake C files after docs are built."""
        for f in os.listdir(join(path_src, "fake_files")):
            copied_file = join(module_path, "scilpy/tractanalysis/", f)
            if os.path.exists(copied_file):
                try:
                    os.remove(copied_file)
                except Exception as e:
                    print(f"[cleanup] Could not remove {copied_file}: {e}")
    app.connect('build-finished', cleanup_fake_files)

    # 2) Scripts documentation
    # We will want to run the --help (i.e. build the argparser) to show the
    # help in the doc.  In some cases, this fails if some modules are not
    # installed. Temporarily replacing lines in file on disk to use mock.
    # Unchanged script (saved in "data" below) is then re-written on disk.
    commit_scripts = ["scil_tractogram_commit.py"]
    amico_scripts = ["scil_NODDI_maps.py",
                     "scil_freewater_maps.py"]
    ml_scripts = ["scil_fodf_bundleparc.py"]

    with open(join(path_src, "scripts/modules.rst"), "w") as m:

        # Create header
        m.write("Scripts\n")
        m.write("==============\n\n")
        m.write(".. toctree::\n    :maxdepth: 4\n\n")

        # Loop over scripts
        for i in sorted(os.listdir(path_script)):
            if 'scil' not in i or i in ['scil_data_download.py',
                                        'scil_freewater_priors.py']:
                continue
            if not isdir(join(path_script, i)):
                name, ext = i.split(".")

                # To be safe, ignore fails
                try:
                    data = None
                    if i in commit_scripts:
                        with open(join(path_script, i), "r") as f:
                            data = f.readlines()
                        with open(join(path_script, i), "w") as f:
                            for line in data:
                                if "commit" in line and "import" in line:
                                    f.write("from mock import Mock\n")
                                    f.write("sys.modules['commit'] = Mock()\n")
                                else:
                                    f.write(line)
                    elif i in amico_scripts:
                        with open(join(path_script, i), "r") as f:
                            data = f.readlines()
                        with open(join(path_script, i), "w") as f:
                            for line in data:
                                if "amico" in line and "import" in line:
                                    f.write("from mock import Mock\n")
                                    f.write("sys.modules['amico'] = Mock()\n")
                                else:
                                    f.write(line)
                    elif i in ml_scripts:
                        with open(join(path_script, i), "r") as f:
                            data = f.readlines()
                        with open(join(path_script, i), "w") as f:
                            for line in data:
                                if 'scilpy.ml.utils' in line:
                                    f.write("IMPORT_ERROR_MSG=''\n")
                                elif 'import DEFAULT_BUNDLES' in line:
                                    f.write("DEFAULT_BUNDLES=''\n")
                                elif 'download_weights, get_model' in line:
                                    f.write("from mock import Mock\n")
                                    f.write("import sys\n")
                                    f.write("sys.modules['torch'] = Mock()\n")
                                elif "have_torch" in line or \
                                     "optional_package" in line or \
                                     "get_device, IMPORT_ERROR_MSG" in line or\
                                     "import predict" in line:
                                    f.write("\n")
                                else:
                                    f.write(line)

                    m.write("    {}\n".format(name))
                    script = __import__(name)

                    script_rst = join(path_src, "scripts",
                                      "{}.rst".format(name))
                    with open(script_rst, "w") as s:
                        s.write(".. _" + name  + ":\n\n")
                        s.write(name + "\n")
                        s.write("=" * len(name) + "\n\n")
                        help_text = script._build_arg_parser().format_help() \
                            .replace("sphinx-build", i)
                        help_text.replace('.py', '')
                        s.write("::\n\n\t")
                        s.write("\t".join(help_text.splitlines(True)))

                    if data is not None:
                        # We have changed data on disk. Re-writing initial text
                        with open(join(path_script, i), "w") as f:
                            for line in data:
                                f.write(line)

                except Exception as e:
                    print(e)
